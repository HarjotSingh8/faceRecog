{"version":3,"sources":["components/webcamComponent.jsx","components/imageUploadButton.jsx","images/stockperson.png","components/ReferenceGrid.jsx","components/UploadButtonGroup.jsx","components/FaceGrid.jsx","components/ReferenceImage.jsx","components/ResultControls.jsx","components/FoundFace.jsx","App.js","reportWebVitals.js","index.js"],"names":["WebcamComponent","props","webcamRef","React","useRef","useState","image","setImage","useEffect","addImage","capture","useCallback","imageSrc","current","getScreenshot","id","className","style","position","borderRadius","zIndex","mirrored","audio","ref","screenshotFormat","class","role","aria-hidden","onClick","processing","bottom","CameraAlt","top","right","closeWebcam","Close","ImageUploadButton","display","input_id","htmlFor","children","name","type","accept","e","target","value","console","log","files","onChange","modelLoaded","addedImage","URL","createObjectURL","DummyGrid","backgroundImage","personImage","fontWeight","ReferenceGrid","images","length","map","obj","index","active","color","cursor","setActive","removeImage","src","UploadButtonGroup","handleFileInput","borderTopRightRadius","borderBottomRightRadius","AddToPhotos","label","webcamFunction","AddAPhoto","FaceGrid","ReferenceImage","width","height","stockPhoto","backgroundSize","backgroundPosition","backgroundRepeat","que","ResultControls","progressStatus","createDatabase","status","uploadReferenceImage","results","startQuery","foundFace","inProgress","FoundFace","img","setImg","setIndex","imagecomp","document","getElementById","crossOrigin","onload","naturalWidth","naturalHeight","centerOfImage","coordinates","imagesInRow","Math","floor","localDimensions","indx","background","faces","App","setModelLoaded","setFaces","referenceFaces","setReferenceFaces","referenceFace","setReferenceFace","capturingWebCamForDatabase","setCapturingWebCamForDatabase","capturingWebcamForReference","setCapturingWebCamForReference","setProcessing","queries","setQueries","imageDimensions","setImageDimensions","setFoundFace","setProgressStatus","postRequest","a","c","ctx","getContext","hiddenImage","data","FormData","Promise","resolve","toBlob","imageBlob","set","setTimeout","drawImage","imageBlob1","fetch","method","body","then","response","json","processFaces","aspect_ratio","options","faceapi","minConfidence","predictions","temp","i","box","_width","adjustmentx","adjustmenty","_x","_y","_height","canv","url","toDataURL","push","newFaces","length_in_images","ceil","sqrt","num_grids","q","fillStyle","fillRect","j","im","reqId","query","result","loadModel","res","JSON","parse","response_json","poll","recognitions","prob","query_detections","window","innerWidth","innerHeight","revokeObjectURL","prepareGridImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0XA0EeA,EAvES,SAACC,GACvB,IAAMC,EAAYC,IAAMC,OAAO,MAC/B,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACAC,qBAAU,WACK,MAATF,GACFL,EAAMQ,SAASH,KAEhB,CAACA,IACJ,IAAMI,EAAUP,IAAMQ,aAAY,WAChC,IAAIC,EAAWV,EAAUW,QAAQC,gBAGjCP,EAASK,KACR,CAACV,IAEJ,OACE,sBACEa,GAAG,cACHC,UAAU,iGACVC,MAAO,CAAEC,SAAU,YAHrB,UAKE,cAAC,IAAD,CACED,MAAO,CAAEE,aAAc,OAAQC,OAAQ,IACvCC,UAAU,EACVC,OAAO,EACPC,IAAKrB,EACLsB,iBAAiB,eAEnB,sBACER,UAAU,gEACVC,MAAO,CAAEG,OAAQ,IAFnB,oBAIU,IACR,sBACEK,MAAM,mCACNC,KAAK,SACLC,cAAY,YAGhB,wBACEC,QAAS,kBAAMlB,KACfM,UAAW,oBAAsBf,EAAM4B,WAAa,WAAa,IACjEZ,MAAO,CAAEC,SAAU,WAAYY,OAAQ,OAAQV,OAAQ,IAHzD,SAKuB,GAApBnB,EAAM4B,WACL,sDACgB,cAACE,EAAA,EAAD,OAGhB,kDACa,IACX,sBACEN,MAAM,mCACNC,KAAK,SACLC,cAAY,cAKpB,wBACEV,MAAO,CAAEC,SAAU,WAAYc,IAAK,OAAQC,MAAO,OAAQb,OAAQ,IACnEQ,QAAS,WACP3B,EAAMiC,eAERlB,UAAU,iBALZ,SAOE,cAACmB,EAAA,EAAD,U,QCnCOC,EAhCW,SAACnC,GACzB,OACE,sBAAKgB,MAAO,CAAEoB,QAAS,eAAvB,UACE,uBACErB,UAAWf,EAAMqC,SAAW,eAC5BC,QAAStC,EAAMqC,SAFjB,SAKGrC,EAAMuC,UAFFvC,EAAMqC,UAIb,uBACEvB,GAAId,EAAMqC,SACVrB,MAAO,CAAEoB,QAAS,QAClBI,KAAMxC,EAAMqC,SACZI,KAAK,OACLC,OAAO,UACPf,QAAS,SAACgB,GACRA,EAAEC,OAAOC,MAAQ,GACjBC,QAAQC,IAAIJ,EAAEC,OAAOI,QAEvBC,SAAU,SAACN,GACT,GAAI3C,EAAMkD,YAAa,CAErB,IAAIC,EAAaC,IAAIC,gBAAgBV,EAAEC,OAAOI,MAAM,IACpDF,QAAQC,IAAIJ,EAAEC,OAAOI,OACrBhD,EAAMQ,SAAS2C,EAAYnD,EAAM4C,gB,iBC3B9B,MAA0B,wCCMnCU,EAAY,SAACtD,GACjB,OACE,sBAAKc,GAAG,WAAWC,UAAU,yCAA7B,UACE,qBACEA,UAAU,wCACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,OAG5C,qBACEzC,UAAU,8DACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,KAH5C,SAME,qBACEzC,UAAU,+CACVC,MAAO,CAAEyC,WAAY,QAFvB,4CAOF,qBACE1C,UAAU,wCACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,WAiDnCE,EA1CO,SAAC1D,GACrB,OAA2B,GAAvBA,EAAM2D,OAAOC,OAAoB,cAAC,EAAD,IAEnC,qBAAK9C,GAAG,gBAAgBC,UAAU,uCAAlC,SACGf,EAAM2D,OAAOE,KAAI,SAACC,EAAKC,GAAN,aAChB,sBACEhD,UACE,2BACCf,EAAMgE,QAAUD,EAAQ,aAAe,gBAH5C,UAME,cAAC,IAAD,CACE/C,MAAO,CACLC,SAAU,WACVc,IAAK,QACLC,MAAO,QACPiC,MAAO,QACPC,OAAQ,WAEVvC,QAAS,WACH3B,EAAMgE,OAAS,GAAKhE,EAAMgE,QAAUD,GACtC/D,EAAMmE,UAAUnE,EAAMgE,OAAS,GACN,GAAvBhE,EAAM2D,OAAOC,QAAa5D,EAAMmE,WAAW,GAC/CnE,EAAMoE,YAAYL,MAGtB,wBACEhD,UAAU,4DACVsD,IAAKP,GAFP,0BAII9D,EAAMgE,QAAUD,EAAQ,gBAAkB,mBAJ9C,yBAMW,WACP/D,EAAMmE,UAAUJ,MAPpB,a,gBC9BKO,EAhCW,SAACtE,GACzB,OACE,sBAAKe,UAAU,iBAAf,UACE,cAAC,EAAD,CACEP,SAAUR,EAAMuE,gBAChB3B,OAAQ5C,EAAM4C,OACdM,YAAalD,EAAMkD,YACnBb,SAAUrC,EAAM4C,OAAS,QAJ3B,SAME,sBACE7B,UAAU,yBACVC,MAAO,CACLwD,qBAAsB,MACtBC,wBAAyB,OAJ7B,UAOE,cAACC,EAAA,EAAD,IAPF,kBAUF,wBAAQ3D,UAAU,+BAAlB,SAAkDf,EAAM2E,QAExD,yBACE5D,UAAU,sBACVY,QAAS,WACP3B,EAAM4E,gBAAe,IAHzB,oBAMS,cAACC,EAAA,EAAD,WCvBTvB,EAAY,SAACtD,GACjB,OACE,sBAAKc,GAAG,WAAWC,UAAU,yCAA7B,UACE,qBACEA,UAAU,wCACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,OAG5C,qBACEzC,UAAU,8DACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,KAH5C,SAME,qBACEzC,UAAU,+CACVC,MAAO,CAAEyC,WAAY,QAFvB,4CAOF,qBACE1C,UAAU,wCACVC,MAAO,CACLuC,gBAAiB,OAASC,EAAc,WAkCnCsB,EA3BE,SAAC9E,GAChB,OAA2B,GAAvBA,EAAM2D,OAAOC,OAAoB,cAAC,EAAD,IAEnC,qBAAK9C,GAAG,WAAWC,UAAU,uCAA7B,SACGf,EAAM2D,OAAOE,KAAI,SAACC,EAAKC,GAAN,OAChB,sBAAKhD,UAAU,wBAAf,UACE,cAAC,IAAD,CACEC,MAAO,CACLC,SAAU,WACVc,IAAK,QACLC,MAAO,QACPiC,MAAO,QACPC,OAAQ,WAEVvC,QAAS,WAGP3B,EAAMoE,YAAYL,MAGtB,qBAAKM,IAAKP,aCjBLiB,EAxCQ,SAAC/E,GACtB,OAAoB,GAAhBA,EAAM+D,MAEN,gCACE,qBACEhD,UAAU,gBACViE,MAAM,QACNC,OAAO,QACPjE,MAAO,CAAEE,aAAc,QACvBmD,IAAKrE,EAAM2D,OAAO3D,EAAM+D,SAE1B,qBAAKhD,UAAU,cAAf,gCAKJ,8BACE,qBACEA,UAAU,gBACVC,MAAO,CACLE,aAAc,OACdqC,gBAAiB,OAAS2B,EAAa,IACvCC,eAAgB,UAChBC,mBAAoB,SACpBC,iBAAkB,YAClBJ,OAAQ,QACRD,MAAO,SAETX,IAAKrE,EAAM2D,OAAO3D,EAAM+D,OAX1B,SAaE,qBACEhD,UAAU,6FACVC,MAAO,CAAEiE,OAAQ,QAASD,MAAO,QAASvB,WAAY,QAFxD,SAIGzD,EAAMsF,WCTFC,EA1BQ,SAACvF,GACtB,OACgD,GAA9CA,EAAMwF,eAAeC,eAAeC,QACgB,GAApD1F,EAAMwF,eAAeG,qBAAqBD,OAIxC,qBAAK3E,UAAU,0BAAf,mDAI8C,GAAvCf,EAAMwF,eAAeI,QAAQF,OAGpC,wBAAQ/D,QAAS,kBAAM3B,EAAM6F,cAA7B,+BAEO7F,EAAM8F,UAEb,wBAAQ/E,UAAU,kBAAkBY,QAAS,kBAAM3B,EAAM6F,cAAzD,2BAIO7F,EAAM+F,WACR,wBAAQhF,UAAU,kBAAlB,sBACK,wBAAQA,UAAU,iBAAlB,4BCmHDiF,EAzIG,SAAChG,GACjB,MAAsBI,oBAAS,GAA/B,mBAAO6F,EAAP,KAAYC,EAAZ,KACA,EAA0B9F,oBAAS,GAAnC,mBAAO2D,EAAP,KAAcoC,EAAd,KACA,EAAgC/F,mBAAS,MAAzC,6BAmCA,OAlCAG,qBAAU,WACR,GAAmB,GAAfP,EAAMK,MAAgB,CACxB6F,EAAOlG,EAAMK,MAAMA,OACnB,IAAI+F,EAAYC,SAASC,eAAe,aACxCF,EAAUG,YAAc,YACxBH,EAAU/B,IAAMrE,EAAMK,MAAMA,MAC5B+F,EAAUI,OAAS,WACjB,IAAIxB,EAAQoB,EAAUK,aAClBxB,EAASmB,EAAUM,cACvB5D,QAAQC,IAAIkC,GACZ,IAAI0B,EAAgB,CAClB3G,EAAMK,MAAMuG,YAAY,GAAK5G,EAAMK,MAAMuG,YAAY,GAAK,EAC1D5G,EAAMK,MAAMuG,YAAY,GAAK5G,EAAMK,MAAMuG,YAAY,GAAK,GAExDC,EAAcC,KAAKC,MAAM/G,EAAMgH,gBAAgB,GAAK,KACxDlE,QAAQC,IAAI8D,GAEZ,IAAII,EACFH,KAAKC,MAAOF,EAAcF,EAAc,GAAM1B,EAAS,GACrD4B,EACFC,KAAKC,MAAOF,EAAcF,EAAc,GAAM3B,GAChDlC,QAAQC,IAAIkE,GAIZd,EAASc,GACTnE,QAAQC,IAAI/C,GACZ8C,QAAQC,IAAIkE,SAEU,GAAfjH,EAAMK,OACf6F,GAAO,KAER,CAAClG,EAAMK,QAGR,qCAEE,qBACEU,UAAU,SACVC,MAAO,CACLC,SAAU,WACV+D,MAAO,QACPC,OAAQ,QACR7C,QAAS,QACT8E,WAAY,QAAUnD,EAAQ/D,EAAMmH,MAAMpD,GAAS,IAAM,IACzDsB,iBAAkB,YAClBF,eAAgB,QAChBjE,aAAc,UAGlB,qBACEJ,GAAG,YACHE,MAAO,CAAEoB,QAAS,UAKpB,qBACEtB,GAAG,eAGHE,MAAO,CAAEC,SAAU,QAASC,aAAc,OAAQkB,QAAS,QAC3DiC,IAAK4B,IAENA,EACC,sBAAKlF,UAAU,4DAAf,UACE,qBAAKA,UAAU,yCAAf,SACE,wBACED,GAAG,aACHC,UAAU,iBACVC,MAAO,CACLgE,MAAOhF,EAAMK,MAAMuG,YAAY,GAAK,KACpC3B,OAAQjF,EAAMK,MAAMuG,YAAY,GAAK,UAK3C,qBAAK7F,UAAU,qBAAf,+BAKF,8BACE,qBACEA,UAAU,gBACVC,MAAO,CACLE,aAAc,OACdqC,gBAAiB,OAAS2B,EAAa,IACvCC,eAAgB,UAChBC,mBAAoB,SACpBC,iBAAkB,YAClBJ,OAAQ,QACRD,MAAO,SATX,SAaE,qBACEjE,UAAU,6FACVC,MAAO,CAAEiE,OAAQ,QAASD,MAAO,QAASvB,WAAY,QAFxD,SAIGzD,EAAMsF,cCijBN8B,MA9oBf,WACE,MAAsChH,oBAAS,GAA/C,mBAAO8C,EAAP,KAAoBmE,EAApB,KACA,EAA8CjH,oBAAS,GAAvD,mBACA,GADA,UAC0BA,mBAAS,KAAnC,mBAAO+G,EAAP,KAAcG,EAAd,KACA,EAA4ClH,mBAAS,IAArD,mBAAOmH,EAAP,KAAuBC,EAAvB,KACA,EAA0CpH,oBAAU,GAApD,mBAAOqH,EAAP,KAAsBC,EAAtB,KACA,EACEtH,oBAAS,GADX,mBAAOuH,EAAP,KAAmCC,EAAnC,KAEA,EACExH,oBAAS,GADX,mBAAOyH,EAAP,KAAoCC,EAApC,KAEA,EAAoC1H,oBAAS,GAA7C,mBAAOwB,EAAP,KAAmBmG,EAAnB,KACA,EAA8B3H,mBAAS,IAAvC,mBAAO4H,EAAP,KAAgBC,EAAhB,KACA,EAA8C7H,mBAAS,IAAvD,mBAAO8H,EAAP,KAAwBC,EAAxB,KACA,EAAkC/H,oBAAS,GAA3C,oBAAO0F,GAAP,MAAkBsC,GAAlB,MAYA,GAA4ChI,mBAAS,CACnDqF,eAAgB,CAAEd,MAAO,kBAAmBe,OAAQ,GACpDC,qBAAsB,CAAEhB,MAAO,mBAAoBe,OAAQ,GAC3DE,QAAS,CAAEjB,MAAO,UAAWe,OAAQ,KAHvC,qBAAOF,GAAP,MAAuB6C,GAAvB,MAKA,GAA4BjI,mBAAS,kBAArC,qBA9Ba,SA6PEkI,GA7PF,iFA6Pb,WAA2BjI,GAA3B,yBAAAkI,EAAA,6DACMC,EAAInC,SAASC,eAAe,gBAC5BmC,EAAMD,EAAEE,WAAW,MAEnBC,EAActC,SAASC,eAAe,eACvBD,SAASC,eAAe,gBAGvCsC,EAAO,IAAIC,SAOfF,EAAYtE,IAAMhE,EAfpB,SAqBwB,IAAIyI,SAAQ,SAACC,GAAD,OAChCP,EAAEQ,OAAOD,EAAS,gBAtBtB,cAqBME,EArBN,OA0BEL,EAAKM,IAAI,cAAeD,EAAW,aACnCT,EAAExD,MAAQ,IACVwD,EAAEvD,OAAS,IACX0D,EAAYtE,IAAMkD,EAAeE,GACjC0B,YAAW,cAAU,KACrBV,EAAIW,UAAUT,EAAa,EAAG,EAAG,IAAK,KA/BxC,UAgCyB,IAAIG,SAAQ,SAACC,GAAD,OACjCP,EAAEQ,OAAOD,EAAS,gBAjCtB,eAgCMM,EAhCN,OAoCET,EAAKM,IAAI,eAAgBG,EAAY,aACrCT,EAAKM,IACH,MACA,oEAEFP,EAAYtE,IAAMjB,IAAIC,gBAAgB4F,GAzCxC,kBA0CSK,MAAM,+CAAgD,CAC3DC,OAAQ,OACRC,KAAMZ,IAELa,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACb,GAIL,OAHA9F,QAAQC,IAAI6F,GAGLA,EAAK9H,OAnDlB,6CA7Pa,+BAoWE8I,KApWF,8EAoWb,8CAAArB,EAAA,6DACMsB,EAAe,GAAK,EACpBC,EAAU,IAAIC,IAA8B,CAC9CC,cAAe,KAHnB,SAM0BD,IAAuB,cAAeD,GANhE,OAMMG,EANN,OAOMC,EAAO,GACFC,EAAI,EARf,YAQkBA,EAAIF,EAAYrG,QARlC,wBASQoB,EAAQiF,EAAYE,GAAGC,IAAIC,OAC3BpF,EAASgF,EAAYE,GAAGC,IAAInF,OAC5BqF,EAAc,EACdC,EAAc,EACdvF,EAAQ6E,EAAe5E,EACzBsF,EAAcvF,EAAQ6E,EAAe5E,EAC5BA,EAASD,EAAQ6E,IAC1BS,EAAcrF,EAAS4E,EAAe7E,GAhB5C,UAkBqB+E,IAAqB,cAAe,CACnD,IAAIA,IACFE,EAAYE,GAAGC,IAAII,GAAKF,EAAc,EACtCL,EAAYE,GAAGC,IAAIK,GAAKF,EAAc,EACtCN,EAAYE,GAAGC,IAAIC,OAASC,EAC5BL,EAAYE,GAAGC,IAAIM,QAAUH,KAvBrC,QAkBQI,EAlBR,OA0BIV,EAAYE,GAAGS,IAAMD,EAAK,GAAGE,YAC7BX,EAAKY,KAAKH,EAAK,GAAGE,aA3BtB,QAQ0CV,IAR1C,gDA6BSD,GA7BT,6CApWa,+BAmYE3F,GAnYF,mFAmYb,WAA+BpB,EAAYP,GAA3C,eAAA2F,EAAA,6DAEER,GAAc,GAEd1B,SAASC,eAAe,eAAejC,IAAMlB,EAJ/C,SAKuByG,KALvB,OAKMmB,EALN,OAMgB,YAAVnI,EACF0E,EAAS,GAAD,mBAAKH,GAAL,YAAe4D,KACJ,aAAVnI,GACT4E,EAAkB,GAAD,mBAAKD,GAAL,YAAwBwD,KAE3ChD,GAAc,GAXhB,4CAnYa,oEAgZb,WAAiC5E,GAAjC,eAAAoF,EAAA,6DACER,GAAc,GACd1B,SAASC,eAAe,eAAejC,IAAMlB,EAF/C,SAGuByG,KAHvB,OAGMmB,EAHN,OAIMpD,GACFL,EAAS,GAAD,mBAAKH,GAAL,YAAe4D,KACvBnD,GAA8B,IACrBC,IACTL,EAAkB,GAAD,mBAAKD,GAAL,YAAwBwD,KACzCjD,GAA+B,IAEjCC,GAAc,GAXhB,4CAhZa,oEA6bb,gDAAAQ,EAAA,sDACMC,EAAInC,SAASC,eAAe,gBAC5BqC,EAActC,SAASC,eAAe,gBACtCmC,EAAMD,EAAEE,WAAW,MAEnBsC,EAAmBlE,KAAKmE,KAAKnE,KAAKoE,KAAK/D,EAAMvD,SAC7CuH,EAAY,EACZH,EAAmB,KACrBG,EAAYrE,KAAKmE,KAAK9D,EAAMvD,OAAS,KACrCoH,EAAmB,IAErBxC,EAAExD,MAA2B,GAAnBgG,EACVxC,EAAEvD,OAA4B,IAAnB+F,EACX7C,EAAmB,CAAoB,GAAnB6C,EAA0C,IAAnBA,IACvCI,EAAI,GACCjB,EAAI,EAff,aAekBA,EAAIgB,GAftB,iBAkBI,IAFA1C,EAAI4C,UAAY,UAChB5C,EAAI6C,SAAS,EAAG,EAAsB,GAAnBN,EAA0C,IAAnBA,GAEpCO,EAAI,EACRA,EAAIP,EAAmBA,GACvBb,EAAIa,EAAmBO,EAAIpE,EAAMvD,OACjC2H,IAGIxH,EAAQoG,EAAIa,EAAmBA,EAAmBO,EACtD5C,EAAYtE,IAAM8C,EAAMpD,GACxB0E,EAAIW,UACFT,EACC5E,EAAQiH,EAAoB,GACM,IAAnClE,KAAKC,MAAMwE,EAAIP,GACf,GACA,KAhCR,OAmCQQ,EAAKhD,EAAEqC,YAnCf,UAoCU,IAAI/B,SAAQ,SAACC,GAAD,OAAaI,WAAWJ,EAAS,QApCvD,yBAqCsBT,GAAYkD,GArClC,QAqCQC,EArCR,OA2DIL,EAAEN,KAAK,CACL7E,IAAKuF,EACLE,MAAOD,EACPE,QAAQ,EACR5H,MAAOoG,IA/Db,QAeiCA,IAfjC,wBA0EElC,EAAWmD,GA1Eb,6CA7ba,sBA4gBb,OA9eA,YACA7K,qBAAU,WACR,GAAIgH,EAAe3D,OAAS,IAAuB,GAAlB6D,EAAqB,CACpD,IAAIyC,EAAI,eAAQ1E,IAChB0E,EAAKvE,qBAAqBD,OAAS,EACnC2C,GAAkB6B,GAClBxC,EAAiB,OACZ,CACL,IAAIwC,EAAI,eAAQ1E,IAChB0E,EAAKvE,qBAAqBD,OAAS,EACnC2C,GAAkB6B,MAEnB,CAAC3C,IACJhH,qBAAU,WACR,GAAI4G,EAAMvD,OAAS,EAAG,CACpB,IAAIsG,EAAI,eAAQ1E,IAChB0E,EAAKzE,eAAeC,OAAS,EAC7B2C,GAAkB6B,OACb,CACL,IAAIA,EAAI,eAAQ1E,IAChB0E,EAAKzE,eAAeC,OAAS,EAC7B2C,GAAkB6B,MAEnB,CAAC/C,IACJ5G,qBAAU,WAAM,4CACd,sBAAAgI,EAAA,4DAC6C,UAD7C,SAEQwB,IADqC,WAD7C,OAGE1C,GAAe,GAHjB,4CADc,uBAAC,WAAD,wBAMduE,KACC,IAwFHrL,qBAAU,WAAM,4CACd,gCAAAgI,EAAA,sDACM2B,EADN,YACiBlC,GACNmC,EAAI,EAFf,YAEkBA,EAAID,EAAKtG,QAF3B,oBAGSsG,EAAKC,GAAGwB,OAHjB,iCAIY,IAAI7C,SAAQ,SAACC,GAAD,OAAaI,WAAWJ,EAAS,QAJzD,uBAKsBO,MACd,+CACEY,EAAKC,GAAGuB,MACR,wEACF,CACEnC,OAAQ,QAGTE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACb,GAEL,OADA9F,QAAQC,IAAI6F,GACLA,KAhBjB,OAkBwB,YAbdiD,EALV,QAkBcnG,QACNwE,EAAKC,GAAGwB,OAASE,EACjB3B,EAAKC,GAAGwB,OAAOhC,KAAOmC,KAAKC,MAAM7B,EAAKC,GAAGwB,OAAOK,eAChD/D,EAAWiC,IAmBY,WAAd2B,EAAInG,OACbuC,EAAW,YAAIiC,KAEfA,EAAKC,GAAGwB,OAAS,SACjB1D,EAAWiC,IA5CnB,QAEmCC,IAFnC,4DADc,sBAmDZnC,EAAQpE,OAAS,IAC6B,WAA7CoE,EAAQA,EAAQpE,OAAS,GAAG+H,OAAOjG,QACW,UAA7CsC,EAAQA,EAAQpE,OAAS,GAAG+H,OAAOjG,QAErC2C,GAAkB,2BACb7C,IADY,IAEfI,QAAQ,2BAAMJ,GAAeI,SAAtB,IAA+BF,OAAQ,OAzDnC,WAAD,wBA2DPuG,KACN,CAACjE,IACJzH,qBAAU,WACR,GAAqC,GAAjCiF,GAAeI,QAAQF,OAAa,CAEtC,IADA,IAAI1B,EAAS,KACJmG,EAAI,EAAGA,EAAInC,EAAQpE,OAAQuG,IAAK,CACvCrH,QAAQC,IAAI,QACZD,QAAQC,IAAIiF,EAAQmC,GAAGwB,OAAOhC,KAAKuC,cACnC,IAAK,IAAIX,EAAI,EAAGA,EAAIvD,EAAQmC,GAAGwB,OAAOhC,KAAKuC,aAAatI,OAAQ2H,IAC9DzI,QAAQC,IAAIiF,EAAQmC,GAAGwB,OAAOhC,KAAKuC,aAAaX,KACE,GAA9CvD,EAAQmC,GAAGwB,OAAOhC,KAAKuC,aAAaX,GAAG,KAE7B,MAAVvH,GACAA,EAAOmI,KAAOnE,EAAQmC,GAAGwB,OAAOhC,KAAKuC,aAAaX,GAAG,OAErDvH,EAAS,IACFmI,KAAOnE,EAAQmC,GAAGwB,OAAOhC,KAAKuC,aAAaX,GAAG,GACrDvH,EAAO4C,YACLoB,EAAQmC,GAAGwB,OAAOhC,KAAKyC,iBAAiBb,GAAG3E,YAC7C5C,EAAO3D,MAAQ2H,EAAQmC,GAAGlE,KAMlCnD,QAAQC,IAAIiB,GACE,MAAVA,GACFoE,GAAapE,MAgBhB,CAACwB,KACJ1C,QAAQC,IAAI+C,IAuDZhD,QAAQC,IAAIiF,GA0NV,sBAAKjH,UAAU,OAAf,UACE,qBACED,GAAG,iBACHC,UACE4G,GAA8BE,EAC1B,UACA,SAEN7G,MAAO,CACLgE,MAAOqH,OAAOC,WACdrH,OAAQoH,OAAOE,aATnB,SAYG5E,GAA8BE,EAC7B,cAAC,EAAD,CACErH,SA5hBG,6CA6hBHyB,YApGU,WACd0F,GAA4BC,GAA8B,GAC1DC,GAA6BC,GAA+B,IAmGxDlG,WAAYA,IAEZ,OAEN,qBAAKd,GAAG,SAASC,UAAU,iCAA3B,mCAGA,sBAAKA,UAAU,kBAAf,UACE,sBAAKD,GAAG,mBAAmBC,UAAU,yBAArC,UACE,qBACEA,UACE,sBACkB,IAAjBoG,EAAMvD,OAAe,gBAAkB,KACtB,IAAjBuD,EAAMvD,OAAe,aAAe,KACpCuD,EAAMvD,OAAS,EAAI,cAAgB,IALxC,0CAUA,qBAAK7C,UAAU,cAAf,SACE,cAAC,EAAD,CAAU4C,OAAQwD,EAAO/C,YArJhB,SAACL,GAElB,IADA,IAAImG,EAAO,GACFC,EAAI,EAAGA,EAAIhD,EAAMvD,OAAQuG,IAC5BpG,GAASoG,EACXD,EAAKY,KAAK3D,EAAMgD,IAEhB/G,IAAIoJ,gBAAgBrF,EAAMgD,IAG9B7C,EAAS4C,QA8IH,qBAAKnJ,UAAU,uCAAf,SACE,cAAC,EAAD,CACE4D,MAAM,eACNC,eAAgBgD,EAChB1E,YAAaA,EACbqB,gBAAiBA,GACjB3B,OAAO,kBAIb,sBAAK9B,GAAG,gBAAgBC,UAAU,yBAAlC,UACE,qBAAKA,UAAU,iCAAf,0CAIA,cAAC,EAAD,CACE4C,OAAQ4D,EACRnD,YA7JkB,SAACL,GAE3B,IADA,IAAImG,EAAO,GACFC,EAAI,EAAGA,EAAI5C,EAAe3D,OAAQuG,IACrCpG,GAASoG,EACXD,EAAKY,KAAKvD,EAAe4C,IAEzB/G,IAAIoJ,gBAAgBjF,EAAe4C,IAGvC3C,EAAkB0C,IAqJVlG,OAAQyD,EACRtD,UAAWuD,IAGb,qBAAK3G,UAAU,4CAAf,SACE,cAAC,EAAD,CACE4D,MAAM,eACNC,eAAgBkD,EAChB5E,YAAaA,EACbqB,gBAAiBA,GACjB3B,OAAO,mBAIb,qBAAK9B,GAAG,uBACR,sBAAKA,GAAG,aAAaC,UAAU,yBAA/B,UACE,qBAAKA,UAAU,iCAAf,qBACA,qBAAKA,UAAU,4CAAf,iCAGA,sBAAKA,UAAU,2BAAf,UACE,qBAAKA,UAAU,2CAAf,SACE,cAAC,EAAD,CACE4C,OAAQ4D,EACRxD,MAAO0D,EACP9C,MAAM,kBACNW,IAAI,6CAGR,qBAAKvE,UAAU,yDAAf,SACE,cAAC,EAAD,CACEyE,eAAgBA,GAChBK,WAAY,YAtmBb,oCAumBG4G,IAEF3G,UAAWA,GACXC,WAAYnE,MAIhB,sBAAKb,UAAU,2CAAf,UACG,IACD,cAAC,EAAD,CACEV,MAAOyF,GACPnB,MAAM,eACNW,IAAI,wCACJ0B,gBAAiBkB,EACjBf,MAAOA,gBAiBjB,qBAAKrG,GAAG,cAAcE,MAAO,CAAEoB,QAAS,QAAUiC,IAAI,KACtD,qBAAKvD,GAAG,eAAeE,MAAO,CAAEoB,QAAS,QAAUiC,IAAI,KACvD,wBAAQvD,GAAG,eAAeE,MAAO,CAAEoB,QAAS,UAC5C,wBAAQtB,GAAG,gBAAgBE,MAAO,CAAEoB,QAAS,cC1oBpCsK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/G,SAASC,eAAe,SAM1BoG,M","file":"static/js/main.87eb1053.chunk.js","sourcesContent":["import { CameraAlt, Close } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nconst WebcamComponent = (props) => {\n  const webcamRef = React.useRef(null);\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    if (image != null) {\n      props.addImage(image);\n    }\n  }, [image]);\n  const capture = React.useCallback(() => {\n    var imageSrc = webcamRef.current.getScreenshot();\n    //var imageSrc = document.getElementById(\"webcam\").getScreenshot();\n    ///props.addImage(imageSrc);\n    setImage(imageSrc);\n  }, [webcamRef]);\n\n  return (\n    <div\n      id=\"webcamModal\"\n      className=\"d-inline-flex justify-content-center shadow position-absolute top-50 start-50 translate-middle\"\n      style={{ position: \"relative\" }}\n    >\n      <Webcam\n        style={{ borderRadius: \"15px\", zIndex: 12 }}\n        mirrored={true}\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n      />\n      <div\n        className=\"text-white position-absolute top-50 start-50 translate-middle\"\n        style={{ zIndex: 11 }}\n      >\n        Loading{\" \"}\n        <span\n          class=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n      </div>\n      <button\n        onClick={() => capture()}\n        className={\"btn btn-success \" + (props.processing ? \"disabled\" : \"\")}\n        style={{ position: \"absolute\", bottom: \"10px\", zIndex: 13 }}\n      >\n        {props.processing == false ? (\n          <>\n            Capture photo <CameraAlt />\n          </>\n        ) : (\n          <>\n            processing{\" \"}\n            <span\n              class=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          </>\n        )}\n      </button>\n      <button\n        style={{ position: \"absolute\", top: \"10px\", right: \"10px\", zIndex: 13 }}\n        onClick={() => {\n          props.closeWebcam();\n        }}\n        className=\"btn btn-danger\"\n      >\n        <Close />\n      </button>\n    </div>\n  );\n};\nexport default WebcamComponent;\n","import { useEffect } from \"react\";\n\nconst ImageUploadButton = (props) => {\n  return (\n    <div style={{ display: \"inline-flex\" }}>\n      <label\n        className={props.input_id + \"Label col-12\"}\n        htmlFor={props.input_id}\n        key={props.input_id}\n      >\n        {props.children}\n      </label>\n      <input\n        id={props.input_id}\n        style={{ display: \"none\" }}\n        name={props.input_id}\n        type=\"file\"\n        accept=\"image/*\"\n        onClick={(e) => {\n          e.target.value = \"\";\n          console.log(e.target.files);\n        }}\n        onChange={(e) => {\n          if (props.modelLoaded) {\n            //console.log(e);\n            let addedImage = URL.createObjectURL(e.target.files[0]);\n            console.log(e.target.files);\n            props.addImage(addedImage, props.target);\n          }\n        }}\n      />\n    </div>\n  );\n};\nexport default ImageUploadButton;\n","export default __webpack_public_path__ + \"static/media/stockperson.ee28a91d.png\";","import { useEffect, useState } from \"react\";\nimport ImageUploadButton from \"./imageUploadButton\";\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\nimport DeleteForever from \"@material-ui/icons/DeleteForever\";\nimport { LocalConvenienceStoreRounded } from \"@material-ui/icons\";\nimport personImage from \"../images/stockperson.png\";\nconst DummyGrid = (props) => {\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 col-12 justify-content-center\">\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n      <div\n        className=\"d-flex bg-light text-dark text-center shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      >\n        <div\n          className=\"d-flex muted px-0 align-items-center bd-blur\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          Add Images to see faces here\n        </div>\n      </div>\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nconst ReferenceGrid = (props) => {\n  if (props.images.length == 0) return <DummyGrid />;\n  return (\n    <div id=\"referenceGrid\" className=\"row mx-0 justify-content-center px-2\">\n      {props.images.map((obj, index) => (\n        <div\n          className={\n            \"my-2 mx-2 shadow px-0  \" +\n            (props.active == index ? \"activeGrid\" : \"inactiveGrid\")\n          }\n        >\n          <DeleteForever\n            style={{\n              position: \"absolute\",\n              top: \"7.5px\",\n              right: \"7.5px\",\n              color: \"white\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              if (props.active > 0 && props.active >= index)\n                props.setActive(props.active - 1);\n              if (props.images.length == 1) props.setActive(-1);\n              props.removeImage(index);\n            }}\n          />\n          <img\n            className=\"shadow position-absolute top-50 start-50 translate-middle\"\n            src={obj}\n            className={\n              props.active == index ? \"activeGridImg\" : \"inactiveGridImg\"\n            }\n            onClick={() => {\n              props.setActive(index);\n            }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ReferenceGrid;\n","import { AddAPhoto, AddToPhotos } from \"@material-ui/icons\";\nimport ImageUploadButton from \"./imageUploadButton\";\nconst UploadButtonGroup = (props) => {\n  return (\n    <div className=\"btn-group pb-2\">\n      <ImageUploadButton\n        addImage={props.handleFileInput}\n        target={props.target}\n        modelLoaded={props.modelLoaded}\n        input_id={props.target + \"Image\"}\n      >\n        <div\n          className=\"col-12 btn btn-success\"\n          style={{\n            borderTopRightRadius: \"0px\",\n            borderBottomRightRadius: \"0px\",\n          }}\n        >\n          <AddToPhotos /> from file\n        </div>\n      </ImageUploadButton>\n      <button className=\"col btn btn-success disabled\">{props.label}</button>\n\n      <button\n        className=\"col btn btn-success\"\n        onClick={() => {\n          props.webcamFunction(true);\n        }}\n      >\n        webcam <AddAPhoto />\n      </button>\n    </div>\n  );\n};\nexport default UploadButtonGroup;\n","import { useEffect, useState } from \"react\";\nimport ImageUploadButton from \"./imageUploadButton\";\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\nimport DeleteForever from \"@material-ui/icons/DeleteForever\";\nimport { LocalConvenienceStoreRounded } from \"@material-ui/icons\";\nimport personImage from \"../images/stockperson.png\";\nconst DummyGrid = (props) => {\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 col-12 justify-content-center\">\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n      <div\n        className=\"d-flex bg-light text-dark text-center shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      >\n        <div\n          className=\"d-flex muted px-0 align-items-center bd-blur\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          Add Images to see faces here\n        </div>\n      </div>\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nconst FaceGrid = (props) => {\n  if (props.images.length == 0) return <DummyGrid />;\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 justify-content-center px-2\">\n      {props.images.map((obj, index) => (\n        <div className=\"my-2 mx-2 shadow px-0\">\n          <DeleteForever\n            style={{\n              position: \"absolute\",\n              top: \"7.5px\",\n              right: \"7.5px\",\n              color: \"white\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              //   if (active > 0) setActive(active - 1);\n              //   if (props.images.length == 1) setActive(-1);\n              props.removeImage(index);\n            }}\n          />\n          <img src={obj} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default FaceGrid;\n","import stockPhoto from \"../images/stockperson.png\";\nconst ReferenceImage = (props) => {\n  if (props.index != -1) {\n    return (\n      <div>\n        <img\n          className=\"d-inline-flex\"\n          width=\"180px\"\n          height=\"320px\"\n          style={{ borderRadius: \"15px\" }}\n          src={props.images[props.index]}\n        ></img>\n        <div className=\"text-center\">Reference Image</div>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div\n        className=\"d-inline-flex\"\n        style={{\n          borderRadius: \"15px\",\n          backgroundImage: \"url(\" + stockPhoto + \")\",\n          backgroundSize: \"contain\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          height: \"320px\",\n          width: \"180px\",\n        }}\n        src={props.images[props.index]}\n      >\n        <div\n          className=\"d-flex bd-blur shadow text-dark bold text-center justify-content-center align-items-center\"\n          style={{ height: \"320px\", width: \"180px\", fontWeight: \"bold\" }}\n        >\n          {props.que}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ReferenceImage;\n","const ResultControls = (props) => {\n  if (\n    props.progressStatus.createDatabase.status == 0 ||\n    props.progressStatus.uploadReferenceImage.status == 0\n  ) {\n    //cannot evaluate results\n    return (\n      <div className=\"btn btn-danger disabled\">\n        Complete Steps 1 & 2 to Match Results\n      </div>\n    );\n  } else if (props.progressStatus.results.status == 0) {\n    //can evaluate results\n    return (\n      <button onClick={() => props.startQuery()}>Check For Matches</button>\n    );\n  } else if (props.foundFace) {\n    return (\n      <button className=\"btn btn-success\" onClick={() => props.startQuery()}>\n        Found a Match\n      </button>\n    );\n  } else if (props.inProgress) {\n    return <button className=\"btn btn-success\"> Loading</button>;\n  } else return <button className=\"btn btn-danger\">No Face Found</button>;\n};\nexport default ResultControls;\n","import { useEffect, useState } from \"react\";\nimport stockPhoto from \"../images/stockperson.png\";\nconst FoundFace = (props) => {\n  const [img, setImg] = useState(false);\n  const [index, setIndex] = useState(false);\n  const [faceCenter, setCenter] = useState(null);\n  useEffect(() => {\n    if (props.image != false) {\n      setImg(props.image.image);\n      let imagecomp = document.getElementById(\"faceImage\");\n      imagecomp.crossOrigin = \"Anonymous\";\n      imagecomp.src = props.image.image;\n      imagecomp.onload = function () {\n        let width = imagecomp.naturalWidth;\n        let height = imagecomp.naturalHeight;\n        console.log(height);\n        let centerOfImage = [\n          props.image.coordinates[0] + props.image.coordinates[2] / 2,\n          props.image.coordinates[1] + props.image.coordinates[3] / 2,\n        ];\n        var imagesInRow = Math.floor(props.localDimensions[1] / 160);\n        console.log(imagesInRow);\n\n        var indx =\n          Math.floor((imagesInRow * centerOfImage[1]) / height - 1) *\n            imagesInRow +\n          Math.floor((imagesInRow * centerOfImage[0]) / width);\n        console.log(indx);\n\n        //images on x axis = props.localDimensions[0]/180\n        //images on y axis = props.localDimensions[1]/320\n        setIndex(indx);\n        console.log(props);\n        console.log(indx);\n      };\n    } else if (props.image == false) {\n      setImg(false);\n    }\n  }, [props.image]);\n\n  return (\n    <>\n      {/* <canvas id=\"faceCanvas\" style={{ display: \"block\" }}></canvas> */}\n      <div\n        className=\"shadow\"\n        style={{\n          position: \"absolute\",\n          width: \"180px\",\n          height: \"320px\",\n          display: \"block\",\n          background: \"url(\" + (index ? props.faces[index] : \"\") + \")\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          borderRadius: \"15px\",\n        }}\n      ></div>\n      <img\n        id=\"faceImage\"\n        style={{ display: \"none\" }}\n        // onLoad={() => {\n        //   adjustDimensions();\n        // }}\n      ></img>\n      <img\n        id=\"matchedImage\"\n        // className=\"d-inline-flex\"\n\n        style={{ position: \"fixed\", borderRadius: \"15px\", display: \"none\" }}\n        src={img}\n      ></img>\n      {img ? (\n        <div className=\"col-12 row mx-0 justify-content-center align-items-center\">\n          <div className=\"col-12 row mx-0 justify-content-center\">\n            <canvas\n              id=\"faceCanvas\"\n              className=\"mx-0 px-0 my-0\"\n              style={{\n                width: props.image.coordinates[2] + \"px\",\n                height: props.image.coordinates[3] + \"px\",\n              }}\n              // style={{ display: \"block\" }}\n            ></canvas>\n          </div>\n          <div className=\"col-12 text-center\">Matched Imaged</div>\n\n          {/* <div className=\"text-center\">Reference Image</div> */}\n        </div>\n      ) : (\n        <div>\n          <div\n            className=\"d-inline-flex\"\n            style={{\n              borderRadius: \"15px\",\n              backgroundImage: \"url(\" + stockPhoto + \")\",\n              backgroundSize: \"contain\",\n              backgroundPosition: \"center\",\n              backgroundRepeat: \"no-repeat\",\n              height: \"320px\",\n              width: \"180px\",\n            }}\n            // src={props.images[props.index]}\n          >\n            <div\n              className=\"d-flex bd-blur shadow text-dark bold text-center justify-content-center align-items-center\"\n              style={{ height: \"320px\", width: \"180px\", fontWeight: \"bold\" }}\n            >\n              {props.que}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n  //}\n  return (\n    <div>\n      <div\n        className=\"d-inline-flex\"\n        style={{\n          borderRadius: \"15px\",\n          backgroundImage: \"url(\" + stockPhoto + \")\",\n          backgroundSize: \"contain\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          height: \"320px\",\n          width: \"180px\",\n        }}\n        src={props.images[props.index]}\n      >\n        <div\n          className=\"d-flex bd-blur shadow text-dark bold text-center justify-content-center align-items-center\"\n          style={{ height: \"320px\", width: \"180px\", fontWeight: \"bold\" }}\n        >\n          {props.que}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default FoundFace;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as faceapi from \"face-api.js\";\nimport WebcamComponent from \"./components/webcamComponent\";\nimport ReferenceGrid from \"./components/ReferenceGrid\";\nimport UploadButtonGroup from \"./components/UploadButtonGroup\";\nimport FaceGrid from \"./components/FaceGrid\";\nimport ReferenceImage from \"./components/ReferenceImage\";\nimport ResultControls from \"./components/ResultControls\";\nimport FoundFace from \"./components/FoundFace\";\n\nimport useInterval from \"./components/useInterval\";\nfunction App() {\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [multiFaceUpload, setMultiFaceUpload] = useState(true);\n  const [faces, setFaces] = useState([]);\n  const [referenceFaces, setReferenceFaces] = useState([]);\n  const [referenceFace, setReferenceFace] = useState(-1);\n  const [capturingWebCamForDatabase, setCapturingWebCamForDatabase] =\n    useState(false);\n  const [capturingWebcamForReference, setCapturingWebCamForReference] =\n    useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [queries, setQueries] = useState([]);\n  const [imageDimensions, setImageDimensions] = useState([]);\n  const [foundFace, setFoundFace] = useState(false);\n\n  /**\n   * progress states\n   *\n   * startingdatabase - database empty\n   * workingdatabase - filling database\n   * startingreference - reference empty\n   * workingreference - selecting reference image\n   * loadingresults - loading results\n   * loadedresults - loaded results\n   */\n  const [progressStatus, setProgressStatus] = useState({\n    createDatabase: { label: \"Create Database\", status: 0 },\n    uploadReferenceImage: { label: \"Upload Reference\", status: 0 },\n    results: { label: \"Results\", status: 0 },\n  });\n  const [active, setActive] = useState(\"createDatabase\");\n  useEffect(() => {\n    if (referenceFaces.length > 0 && referenceFace == -1) {\n      let temp = { ...progressStatus };\n      temp.uploadReferenceImage.status = 1;\n      setProgressStatus(temp);\n      setReferenceFace(0);\n    } else {\n      let temp = { ...progressStatus };\n      temp.uploadReferenceImage.status = 0;\n      setProgressStatus(temp);\n    }\n  }, [referenceFaces]);\n  useEffect(() => {\n    if (faces.length > 0) {\n      let temp = { ...progressStatus };\n      temp.createDatabase.status = 1;\n      setProgressStatus(temp);\n    } else {\n      let temp = { ...progressStatus };\n      temp.createDatabase.status = 0;\n      setProgressStatus(temp);\n    }\n  }, [faces]);\n  useEffect(() => {\n    async function loadModel() {\n      const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n      await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n      setModelLoaded(true);\n    }\n    loadModel();\n  }, []);\n\n  // useEffect(() => {\n  //   async function postQueries() {\n  //     if (queries.length != 0) {\n  //       let c = document.getElementById(\"hiddenCanvas\");\n  //       let ctx = c.getContext(\"2d\");\n  //       let temp = [...queries];\n  //       let hiddenImage = document.getElementById(\"hiddenImage\");\n  //       for (let i = 0; i < temp.length; i++) {\n  //         if (temp[i].query == false) {\n  //           // console.log(temp[i].img);\n  //           var data = new FormData();\n  //           c.width = imageDimensions[0];\n  //           c.height = imageDimensions[1];\n  //           hiddenImage.src = temp[i].img;\n  //           console.log(\"yes\");\n  //           // let t = setTimeout(() => {}, 500);\n  //           await new Promise((resolve) => setTimeout(resolve, 500));\n\n  //           console.log(\"another yes\");\n  //           var data = new FormData();\n  //           ctx.drawImage(\n  //             hiddenImage,\n  //             0,\n  //             0,\n  //             imageDimensions[0],\n  //             imageDimensions[1]\n  //           );\n  //           console.log(imageDimensions);\n  //           console.log(hiddenImage);\n\n  //           let imageBlob = await new Promise((resolve) =>\n  //             c.toBlob(resolve, \"image/png\")\n  //           );\n\n  //           c.width = 180;\n  //           c.height = 320;\n  //           hiddenImage.src = referenceFaces[referenceFace];\n  //           setTimeout(() => {}, 100);\n  //           ctx.drawImage(hiddenImage, 0, 0, 180, 320);\n  //           let imageBlob1 = await new Promise((resolve) =>\n  //             c.toBlob(resolve, \"image/png\")\n  //           );\n  //           data.set(\"query_image\", imageBlob, \"file2.png\");\n  //           data.set(\"target_image\", imageBlob1, \"file1.png\");\n  //           data.set(\n  //             \"key\",\n  //             \"662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\"\n  //           );\n  //           hiddenImage.src = URL.createObjectURL(imageBlob);\n  //           fetch(\"https://api.skylarklabs.ai/face-recognition/\", {\n  //             method: \"POST\",\n  //             body: data,\n  //           })\n  //             .then((response) => response.json())\n  //             .then((data) => {\n  //               console.log(data);\n  //               temp[i].query = data.id;\n  //               setQueries(temp);\n  //             });\n  //           //   UseInterval(async () => {\n  //           //     console.log(\"poll\");\n  //           //     fetch(\n  //           //       \"https://api.skylarklabs.ai/face-recognition/\" +\n  //           //         temp[i].query +\n  //           //         \"?key=662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\",\n  //           //       {\n  //           //         method: \"GET\",\n  //           //       }\n  //           //     )\n  //           //       .then((response) => response.json())\n  //           //       .then((data) => {\n  //           //         console.log(data);\n  //           //         if (data.status == \"success\") clearInterval();\n  //           //       });\n  //           //   }, 1000);\n  //           //   break;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   postQueries();\n  // }, [queries]);\n  // useEffect(() => {\n  //   if (foundFace) {\n  //   }\n  // }, [foundFace]);\n  useEffect(() => {\n    async function poll() {\n      let temp = [...queries];\n      for (let i = 0; i < temp.length; i++) {\n        if (!temp[i].result) {\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n          let res = await fetch(\n            \"https://api.skylarklabs.ai/face-recognition/\" +\n              temp[i].query +\n              \"?key=662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\",\n            {\n              method: \"GET\",\n            }\n          )\n            .then((response) => response.json())\n            .then((data) => {\n              console.log(data);\n              return data;\n            });\n          if (res.status == \"success\") {\n            temp[i].result = res;\n            temp[i].result.json = JSON.parse(temp[i].result.response_json);\n            setQueries(temp);\n            // if (temp[i].result.json.reference_detections.length > 0) {\n            //   let c = document.getElementById(\"hiddenCanvas2\");\n            //   let ctx = c.getContext(\"2d\");\n            //   //document.getElementById(\"hiddenImage\").src = queries[i].img;\n            //   let x = document.getElementById(\"hiddenImage\");\n            //   ctx.drawImage(\n            //     x,\n            //     temp[i].result.json.reference_detections[0].coordinates[0],\n            //     temp[i].result.json.reference_detections[0].coordinates[1],\n            //     temp[i].result.json.reference_detections[0].coordinates[2],\n            //     temp[i].result.json.reference_detections[0].coordinates[3]\n            //   );\n            //   // let imageBlob = await new Promise((resolve) =>\n            //   //   c.toBlob(resolve, \"image/png\")\n            //   // );\n            //   let y = c.toDataURL();\n            //   document.getElementById(\"hiddenImage2\").src = y;\n            // }\n          } else if (res.status == \"pending\") {\n            setQueries([...temp]);\n          } else {\n            temp[i].result = \"failed\";\n            setQueries(temp);\n          }\n        }\n      }\n    }\n    if (\n      queries.length > 0 &&\n      (queries[queries.length - 1].result.status == \"success\" ||\n        queries[queries.length - 1].result.status == \"failed\")\n    ) {\n      setProgressStatus({\n        ...progressStatus,\n        results: { ...progressStatus.results, status: 1 },\n      });\n    } else poll();\n  }, [queries]);\n  useEffect(() => {\n    if (progressStatus.results.status == 1) {\n      let active = null;\n      for (let i = 0; i < queries.length; i++) {\n        console.log(\"here\");\n        console.log(queries[i].result.json.recognitions);\n        for (let j = 0; j < queries[i].result.json.recognitions.length; j++) {\n          console.log(queries[i].result.json.recognitions[j]);\n          if (queries[i].result.json.recognitions[j][0] != -1) {\n            if (\n              active == null ||\n              active.prob < queries[i].result.json.recognitions[j][1]\n            ) {\n              active = {};\n              active.prob = queries[i].result.json.recognitions[j][1];\n              active.coordinates =\n                queries[i].result.json.query_detections[j].coordinates;\n              active.image = queries[i].img;\n              //active.image = queries[i].result.query_image;\n            }\n          }\n        }\n      }\n      console.log(active);\n      if (active != null) {\n        setFoundFace(active);\n        // let c = document.getElementById(\"hiddenCanvas2\");\n        // let ctx = c.getContext(\"2d\");\n        // //document.getElementById(\"hiddenImage\").src = queries[i].img;\n        // let x = document.getElementById(\"hiddenImage\");\n        // ctx.drawImage(\n        //   x,\n        //   active.coordinates[0],\n        //   active.coordinates[1],\n        //   active.coordinates[2],\n        //   active.coordinates[3]\n        // );\n        // let y = c.toDataURL();\n        // document.getElementById(\"hiddenImage2\").src = y;\n      }\n    }\n  }, [progressStatus]);\n  console.log(foundFace);\n  async function postRequest(image) {\n    let c = document.getElementById(\"hiddenCanvas\");\n    let ctx = c.getContext(\"2d\");\n    // let temp = [...queries];\n    let hiddenImage = document.getElementById(\"hiddenImage\");\n    let hiddenImage2 = document.getElementById(\"hiddenImage2\");\n\n    // console.log(temp[i].img);\n    var data = new FormData();\n    //c.width = imageDimensions[0];\n    //c.height = imageDimensions[1];\n    // console.log(\"yes\");\n    // // let t = setTimeout(() => {}, 500);\n    // await new Promise((resolve) => setTimeout(resolve, 1500));\n    //console.log(\"another yes\");\n    hiddenImage.src = image;\n    //await hiddenImage.onload();\n    //setTimeout(() => {}, 100);\n    //ctx.drawImage(hiddenImage2, 0, 0, 1080, 1920);\n    // console.log(imageDimensions);\n    // console.log(hiddenImage);\n    let imageBlob = await new Promise((resolve) =>\n      c.toBlob(resolve, \"image/png\")\n    );\n    //console.log(imageBlob);\n    //await new Promise((resolve) => setTimeout(resolve, 1500));\n    data.set(\"query_image\", imageBlob, \"file2.png\");\n    c.width = 180;\n    c.height = 320;\n    hiddenImage.src = referenceFaces[referenceFace];\n    setTimeout(() => {}, 100);\n    ctx.drawImage(hiddenImage, 0, 0, 180, 320);\n    let imageBlob1 = await new Promise((resolve) =>\n      c.toBlob(resolve, \"image/png\")\n    );\n\n    data.set(\"target_image\", imageBlob1, \"file1.png\");\n    data.set(\n      \"key\",\n      \"662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\"\n    );\n    hiddenImage.src = URL.createObjectURL(imageBlob);\n    return fetch(\"https://api.skylarklabs.ai/face-recognition/\", {\n      method: \"POST\",\n      body: data,\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        // temp[i].query = data.id;\n        // setQueries(temp);\n        return data.id;\n      });\n  }\n  console.log(queries);\n  // useEffect(() => {\n  //   if (queries.length > 0 && queries[queries.length - 1].query) {\n  //     let temp = [...queries];\n  //     for (var i = 0; i < temp.length; i++) {\n  //       if (!temp[i].result) {\n  //         let res = fetch(\n  //           \"https://api.skylarklabs.ai/face-recognition/\" +\n  //             temp[i].query +\n  //             \"?key=662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\",\n  //           {\n  //             method: \"GET\",\n  //           }\n  //         )\n  //           .then((response) => response.json())\n  //           .then((data) => {\n  //             console.log(data);\n  //           });\n  //         break;\n  //       }\n  //     }\n  //   }\n  // }, [queries]);\n  /**\n   * Functions\n   *\n   * handleFileInput\n   * handles input from file\n   * sends cropped faces to database or reference array\n   *\n   * handleWebcamInput\n   * handles input from webcam\n   * sends cropped faces to databse or reference array\n   *\n   * addFacesToDatabase\n   * adds faces to database\n   *\n   * addFacesToReference\n   * adds faces to reference\n   *\n   * removeFaceFromDatabse\n   * input: index (number)\n   * removes face from database\n   *\n   * removeFaceFromReference\n   * input: index (number)\n   * removes face from reference\n   */\n\n  async function processFaces() {\n    let aspect_ratio = 16 / 9;\n    var options = new faceapi.SsdMobilenetv1Options({\n      minConfidence: 0.4,\n    });\n    //console.log(faces);\n    let predictions = await faceapi.detectAllFaces(\"hiddenImage\", options);\n    let temp = [];\n    for (var i = 0; i < predictions.length; i++) {\n      let width = predictions[i].box._width;\n      let height = predictions[i].box.height;\n      let adjustmentx = 0;\n      let adjustmenty = 0;\n      if (width * aspect_ratio > height) {\n        adjustmenty = width * aspect_ratio - height;\n      } else if (height > width * aspect_ratio) {\n        adjustmentx = height / aspect_ratio - width;\n      }\n      var canv = await faceapi.extractFaces(\"hiddenImage\", [\n        new faceapi.Rect(\n          predictions[i].box._x - adjustmentx / 2,\n          predictions[i].box._y - adjustmenty / 2,\n          predictions[i].box._width + adjustmentx,\n          predictions[i].box._height + adjustmenty\n        ),\n      ]);\n      predictions[i].url = canv[0].toDataURL();\n      temp.push(canv[0].toDataURL());\n    }\n    return temp;\n  }\n  async function handleFileInput(addedImage, target) {\n    //console.log(addedImage);\n    setProcessing(true);\n    //let addedImage = URL.createObjectURL(e.target.files[0]);\n    document.getElementById(\"hiddenImage\").src = addedImage;\n    let newFaces = await processFaces();\n    if (target == \"database\") {\n      setFaces([...faces, ...newFaces]);\n    } else if (target == \"reference\") {\n      setReferenceFaces([...referenceFaces, ...newFaces]);\n    }\n    setProcessing(false);\n  }\n  async function handleWebcamInput(addedImage) {\n    setProcessing(true);\n    document.getElementById(\"hiddenImage\").src = addedImage;\n    let newFaces = await processFaces();\n    if (capturingWebCamForDatabase) {\n      setFaces([...faces, ...newFaces]);\n      setCapturingWebCamForDatabase(false);\n    } else if (capturingWebcamForReference) {\n      setReferenceFaces([...referenceFaces, ...newFaces]);\n      setCapturingWebCamForReference(false);\n    }\n    setProcessing(false);\n  }\n  const removeFace = (index) => {\n    var temp = [];\n    for (var i = 0; i < faces.length; i++) {\n      if (index != i) {\n        temp.push(faces[i]);\n      } else {\n        URL.revokeObjectURL(faces[i]);\n      }\n    }\n    setFaces(temp);\n  };\n  const removeReferenceFace = (index) => {\n    var temp = [];\n    for (var i = 0; i < referenceFaces.length; i++) {\n      if (index != i) {\n        temp.push(referenceFaces[i]);\n      } else {\n        URL.revokeObjectURL(referenceFaces[i]);\n      }\n    }\n    setReferenceFaces(temp);\n  };\n  const updateProgress = (level, status) => {\n    var progress = { ...progressStatus };\n    // console.log(progress);\n    progress[level].status = status;\n    setProgressStatus(progress);\n  };\n  const closeWebcam = () => {\n    if (capturingWebCamForDatabase) setCapturingWebCamForDatabase(false);\n    if (capturingWebcamForReference) setCapturingWebCamForReference(false);\n  };\n  async function prepareGridImage() {\n    var c = document.getElementById(\"hiddenCanvas\");\n    var hiddenImage = document.getElementById(\"hiddenImage2\");\n    var ctx = c.getContext(\"2d\");\n    //compute size of canvas\n    var length_in_images = Math.ceil(Math.sqrt(faces.length));\n    var num_grids = 1;\n    if (length_in_images > 12) {\n      num_grids = Math.ceil(faces.length / 144);\n      length_in_images = 12;\n    }\n    c.width = length_in_images * 90;\n    c.height = length_in_images * 160;\n    setImageDimensions([length_in_images * 90, length_in_images * 160]);\n    let q = [];\n    for (let i = 0; i < num_grids; i++) {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, length_in_images * 90, length_in_images * 160);\n      for (\n        let j = 0;\n        j < length_in_images * length_in_images &&\n        i * length_in_images + j < faces.length;\n        j++\n      ) {\n        //console.log(\"yes\");\n        let index = i * length_in_images * length_in_images + j;\n        hiddenImage.src = faces[index];\n        ctx.drawImage(\n          hiddenImage,\n          (index % length_in_images) * 90,\n          Math.floor(j / length_in_images) * 160,\n          90,\n          160\n        );\n      }\n      var im = c.toDataURL();\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      let reqId = await postRequest(im);\n      //console.log(temp);\n      // useInterval(async () => {\n      //   console.log(\"poll\");\n      //   let temp = fetch(\n      //     \"https://api.skylarklabs.ai/face-recognition/\" +\n      //       reqId +\n      //       \"?key=662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\",\n      //     {\n      //       method: \"GET\",\n      //     }\n      //   )\n      //     .then((response) => response.json())\n      //     .then((data) => {\n      //       console.log(data);\n      //       if (data.status == \"Success\") {\n      //         clearInterval();\n      //       }\n      //       return data;\n      //     });\n      //   if (temp.status === \"Success\") return temp;\n      // }, 1000);\n      q.push({\n        img: im,\n        query: reqId,\n        result: false,\n        index: i,\n      });\n\n      // let im = await new Promise((resolve) => c.toBlob(resolve, \"image/png\"));\n      // q.push({\n      //   img: im,\n      //   query: false,\n      //   result: false,\n      //   index: i,\n      // });\n    }\n    setQueries(q);\n    // ctx.width = grid_in_images * 90;\n    // ctx.height = grid_in_images * 160;\n    //ctx.drawImage(img, 10, 10, 90, 160);\n  }\n  return (\n    <div className=\"App \">\n      <div\n        id=\"webcamBackdrop\"\n        className={\n          capturingWebCamForDatabase || capturingWebcamForReference\n            ? \"d-block\"\n            : \"d-none\"\n        }\n        style={{\n          width: window.innerWidth,\n          height: window.innerHeight,\n        }}\n      >\n        {capturingWebCamForDatabase || capturingWebcamForReference ? (\n          <WebcamComponent\n            addImage={handleWebcamInput}\n            closeWebcam={closeWebcam}\n            processing={processing}\n          />\n        ) : null}\n      </div>\n      <div id=\"navbar\" className=\"shadow bg-dark text-light mb-2\">\n        Face Recognition Demo\n      </div>\n      <div className=\"row mx-0 col-12\">\n        <div id=\"databaseGridArea\" className=\"row mx-0 bg-light px-0\">\n          <div\n            className={\n              \"col-12 text-light \" +\n              (faces.length === 0 ? \"bg-secondary \" : \"\") +\n              (faces.length === 1 ? \"bg-danger \" : \"\") +\n              (faces.length > 1 ? \"bg-success \" : \"\")\n            }\n          >\n            Step 1: Create your database\n          </div>\n          <div className=\"col-12 px-0\">\n            <FaceGrid images={faces} removeImage={removeFace} />\n          </div>\n          <div className=\"col-12 d-flex justify-content-center\">\n            <UploadButtonGroup\n              label=\"Import Faces\"\n              webcamFunction={setCapturingWebCamForDatabase}\n              modelLoaded={modelLoaded}\n              handleFileInput={handleFileInput}\n              target=\"database\"\n            />\n          </div>\n        </div>\n        <div id=\"referenceArea\" className=\"row mx-0 bg-light px-0\">\n          <div className=\"col-12 text-light bg-secondary\">\n            Step 2: Add a reference face\n          </div>\n\n          <ReferenceGrid\n            images={referenceFaces}\n            removeImage={removeReferenceFace}\n            active={referenceFace}\n            setActive={setReferenceFace}\n          />\n\n          <div className=\"col-12 d-flex justify-content-center pb-2\">\n            <UploadButtonGroup\n              label=\"Import Faces\"\n              webcamFunction={setCapturingWebCamForReference}\n              modelLoaded={modelLoaded}\n              handleFileInput={handleFileInput}\n              target=\"reference\"\n            />\n          </div>\n        </div>\n        <div id=\"referenceEntryArea\"></div>\n        <div id=\"resultArea\" className=\"row mx-0 bg-light px-0\">\n          <div className=\"col-12 text-light bg-secondary\">Results</div>\n          <div className=\"col-12 bg-light text-center text-success \">\n            Result updates here\n          </div>\n          <div className=\"row mx-0 col-12 bg-light\">\n            <div className=\"col-4 d-flex mx-0 justify-content-center\">\n              <ReferenceImage\n                images={referenceFaces}\n                index={referenceFace}\n                label=\"Reference Image\"\n                que=\"Reference Image Will be displayed here\"\n              />\n            </div>\n            <div className=\"col-4 d-flex justify-content-center align-items-center\">\n              <ResultControls\n                progressStatus={progressStatus}\n                startQuery={() => {\n                  prepareGridImage();\n                }}\n                foundFace={foundFace}\n                inProgress={processing}\n              />\n              {/* <button onClick={() => prepareGridImage()}>prepare</button> */}\n            </div>\n            <div className=\"col-4 d-flex mx-0 justify-content-center\">\n              {\" \"}\n              <FoundFace\n                image={foundFace}\n                label=\"Mached Image\"\n                que=\"Images Matched Will be displayed here\"\n                localDimensions={imageDimensions}\n                faces={faces}\n              />\n            </div>\n            {/* <div className=\"col-4 d-flex justify-content-center align-items-center\">\n              <ResultControls\n                progressStatus={progressStatus}\n                startQuery={() => {\n                  prepareGridImage();\n                }}\n                foundFace={foundFace}\n                inProgress={processing}\n              />\n\n            </div> */}\n          </div>\n        </div>\n      </div>\n      <img id=\"hiddenImage\" style={{ display: \"none\" }} src=\"\" />\n      <img id=\"hiddenImage2\" style={{ display: \"none\" }} src=\"\" />\n      <canvas id=\"hiddenCanvas\" style={{ display: \"none\" }} />\n      <canvas id=\"hiddenCanvas2\" style={{ display: \"none\" }} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
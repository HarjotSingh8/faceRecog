{"version":3,"sources":["components/webcamComponent.jsx","components/imageUploadButton.jsx","images/stockperson.png","components/ReferenceGrid.jsx","components/UploadButtonGroup.jsx","components/FaceGrid.jsx","components/ReferenceImage.jsx","components/ResultControls.jsx","components/FoundFace.jsx","components/tips.jsx","App.js","reportWebVitals.js","index.js"],"names":["WebcamComponent","props","webcamRef","React","useRef","useState","image","setImage","useEffect","addImage","capture","useCallback","imageSrc","current","getScreenshot","id","className","style","position","borderRadius","zIndex","mirrored","audio","ref","screenshotFormat","class","role","aria-hidden","onClick","processing","bottom","CameraAlt","top","right","closeWebcam","Close","ImageUploadButton","display","input_id","htmlFor","children","name","type","accept","e","target","value","console","log","files","onChange","modelLoaded","addedImage","URL","createObjectURL","DummyGrid","backgroundImage","personImage","fontWeight","ReferenceGrid","images","length","map","obj","index","active","color","cursor","result","setActive","removeImage","src","UploadButtonGroup","handleFileInput","borderTopRightRadius","borderBottomRightRadius","AddToPhotos","label","webcamFunction","AddAPhoto","FaceGrid","ReferenceImage","width","height","stockPhoto","backgroundSize","backgroundPosition","backgroundRepeat","que","ResultControls","numFaces","numReferences","progressStatus","startQuery","foundFace","reset","createDatabase","status","uploadReferenceImage","results","inProgress","FoundFace","img","setImg","setIndex","imagecomp","document","getElementById","crossOrigin","onload","naturalWidth","naturalHeight","centerOfImage","coordinates","imagesInRow","Math","floor","localDimensions","indx","faces","Tips","tip","tips","condition","Info","text","App","setModelLoaded","setFaces","referenceFaces","setReferenceFaces","referenceFace","setReferenceFace","setProcessing","queries","setQueries","imageDimensions","setImageDimensions","setFoundFace","fetchingResults","inputResource","inputTarget","setProgressStatus","postRequest","a","c","ctx","getContext","hiddenImage","data","FormData","Promise","resolve","toBlob","imageBlob","set","setTimeout","drawImage","imageBlob1","fetch","method","body","then","response","json","processFaces","aspect_ratio","options","faceapi","minConfidence","predictions","temp","i","box","_width","adjustmentx","adjustmenty","_x","_y","_height","canv","url","toDataURL","push","newFaces","process","loadModel","query","res","JSON","parse","response_json","poll","recognitions","j","prob","query_detections","startWebCam","length_in_images","ceil","sqrt","num_grids","q","fillStyle","fillRect","im","reqId","window","innerWidth","innerHeight","revokeObjectURL","arg","active_reference","prepareGridImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc20fab6.chunk.js","sourcesContent":["import { CameraAlt, Close } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nconst WebcamComponent = (props) => {\n  const webcamRef = React.useRef(null);\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    if (image != null) {\n      props.addImage(image);\n    }\n  }, [image]);\n  const capture = React.useCallback(() => {\n    var imageSrc = webcamRef.current.getScreenshot();\n    //var imageSrc = document.getElementById(\"webcam\").getScreenshot();\n    ///props.addImage(imageSrc);\n    setImage(imageSrc);\n  }, [webcamRef]);\n\n  return (\n    <div\n      id=\"webcamModal\"\n      className=\"d-inline-flex justify-content-center shadow position-absolute top-50 start-50 translate-middle\"\n      style={{ position: \"relative\" }}\n    >\n      <Webcam\n        style={{ borderRadius: \"15px\", zIndex: 12 }}\n        mirrored={true}\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n      />\n      <div\n        className=\"text-white position-absolute top-50 start-50 translate-middle\"\n        style={{ zIndex: 11 }}\n      >\n        Loading{\" \"}\n        <span\n          class=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n      </div>\n      <button\n        onClick={() => capture()}\n        className={\"btn btn-success \" + (props.processing ? \"disabled\" : \"\")}\n        style={{ position: \"absolute\", bottom: \"10px\", zIndex: 13 }}\n      >\n        {props.processing == false ? (\n          <>\n            Capture photo <CameraAlt />\n          </>\n        ) : (\n          <>\n            processing{\" \"}\n            <span\n              class=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          </>\n        )}\n      </button>\n      <button\n        style={{ position: \"absolute\", top: \"10px\", right: \"10px\", zIndex: 13 }}\n        onClick={() => {\n          props.closeWebcam();\n        }}\n        className=\"btn btn-danger\"\n      >\n        <Close />\n      </button>\n    </div>\n  );\n};\nexport default WebcamComponent;\n","import { useEffect } from \"react\";\n\nconst ImageUploadButton = (props) => {\n  return (\n    <div style={{ display: \"inline-flex\" }}>\n      <label\n        className={props.input_id + \"Label col-12\"}\n        htmlFor={props.input_id}\n        key={props.input_id}\n      >\n        {props.children}\n      </label>\n      <input\n        id={props.input_id}\n        style={{ display: \"none\" }}\n        name={props.input_id}\n        type=\"file\"\n        accept=\"image/*\"\n        onClick={(e) => {\n          e.target.value = \"\";\n          console.log(e.target.files);\n        }}\n        onChange={(e) => {\n          if (props.modelLoaded) {\n            //console.log(e);\n            let addedImage = URL.createObjectURL(e.target.files[0]);\n            console.log(e.target.files);\n            props.addImage(addedImage, props.target);\n          }\n        }}\n      />\n    </div>\n  );\n};\nexport default ImageUploadButton;\n","export default __webpack_public_path__ + \"static/media/stockperson.ee28a91d.png\";","import { useEffect, useState } from \"react\";\nimport ImageUploadButton from \"./imageUploadButton\";\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\nimport DeleteForever from \"@material-ui/icons/DeleteForever\";\nimport { LocalConvenienceStoreRounded } from \"@material-ui/icons\";\nimport personImage from \"../images/stockperson.png\";\nconst DummyGrid = (props) => {\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 col-12 justify-content-center\">\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n      <div\n        className=\"d-flex bg-light text-dark text-center shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      >\n        <div\n          className=\"d-flex muted px-0 align-items-center bd-blur\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          Add Images to see faces here\n        </div>\n      </div>\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nconst ReferenceGrid = (props) => {\n  if (props.images.length == 0) return <DummyGrid />;\n  return (\n    <div id=\"referenceGrid\" className=\"row mx-0 justify-content-center px-2\">\n      {props.images.map((obj, index) => (\n        <div\n          key={\"reference\" + index}\n          className={\n            \"my-2 mx-2 shadow px-0  \" +\n            (props.active == index ? \"activeGrid\" : \"inactiveGrid\")\n          }\n        >\n          <DeleteForever\n            style={{\n              position: \"absolute\",\n              top: \"7.5px\",\n              right: \"7.5px\",\n              color: \"white\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              if (props.result !== true) {\n                if (props.active > 0 && props.active >= index)\n                  props.setActive(props.active - 1);\n                if (props.images.length == 1) props.setActive(-1);\n                props.removeImage(index);\n              }\n            }}\n          />\n          <img\n            className=\"shadow position-absolute top-50 start-50 translate-middle\"\n            src={obj}\n            className={\n              props.active == index ? \"activeGridImg\" : \"inactiveGridImg\"\n            }\n            onClick={() => {\n              if (props.result !== true) props.setActive(index);\n            }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ReferenceGrid;\n","import { AddAPhoto, AddToPhotos } from \"@material-ui/icons\";\nimport ImageUploadButton from \"./imageUploadButton\";\nconst UploadButtonGroup = (props) => {\n  return (\n    <div className=\"btn-group pb-2\">\n      <ImageUploadButton\n        addImage={props.handleFileInput}\n        target={props.target}\n        modelLoaded={props.modelLoaded}\n        input_id={props.target + \"Image\"}\n      >\n        <div\n          className={\n            \"col-12 btn btn-success\" + (props.processing ? \"disabled\" : \"\")\n          }\n          style={{\n            borderTopRightRadius: \"0px\",\n            borderBottomRightRadius: \"0px\",\n          }}\n        >\n          <AddToPhotos /> from file\n        </div>\n      </ImageUploadButton>\n      <button className=\"col btn btn-success disabled\">{props.label}</button>\n\n      <button\n        className={\n          \"col btn btn-success \" + (props.processing ? \"disabled\" : \"\")\n        }\n        onClick={() => {\n          props.webcamFunction(true);\n        }}\n      >\n        webcam <AddAPhoto />\n      </button>\n    </div>\n  );\n};\nexport default UploadButtonGroup;\n","import { useEffect, useState } from \"react\";\nimport ImageUploadButton from \"./imageUploadButton\";\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\nimport DeleteForever from \"@material-ui/icons/DeleteForever\";\nimport { LocalConvenienceStoreRounded } from \"@material-ui/icons\";\nimport personImage from \"../images/stockperson.png\";\nconst DummyGrid = (props) => {\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 col-12 justify-content-center\">\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n      <div\n        className=\"d-flex bg-light text-dark text-center shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      >\n        <div\n          className=\"d-flex muted px-0 align-items-center bd-blur\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          Add Images to see faces here\n        </div>\n      </div>\n      <div\n        className=\"d-flex bg-light shadow my-2 mx-2 px-0\"\n        style={{\n          backgroundImage: \"url(\" + personImage + \")\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nconst FaceGrid = (props) => {\n  if (props.images.length == 0) return <DummyGrid />;\n  return (\n    <div id=\"faceGrid\" className=\"row mx-0 justify-content-center px-2\">\n      {props.images.map((obj, index) => (\n        <div key={\"face\" + index} className=\"my-2 mx-2 shadow px-0\">\n          <DeleteForever\n            style={{\n              position: \"absolute\",\n              top: \"7.5px\",\n              right: \"7.5px\",\n              color: \"white\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              //   if (active > 0) setActive(active - 1);\n              //   if (props.images.length == 1) setActive(-1);\n              if (props.result !== true) props.removeImage(index);\n            }}\n          />\n          <img src={obj} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default FaceGrid;\n","import stockPhoto from \"../images/stockperson.png\";\nconst ReferenceImage = (props) => {\n  if (props.index != -1) {\n    return (\n      <div>\n        <img\n          className=\"d-inline-flex\"\n          width=\"180px\"\n          height=\"320px\"\n          style={{ borderRadius: \"15px\" }}\n          src={props.images[props.index]}\n        ></img>\n        <div className=\"text-center\">Reference Image</div>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div\n        className=\"d-inline-flex\"\n        style={{\n          borderRadius: \"15px\",\n          backgroundImage: \"url(\" + stockPhoto + \")\",\n          backgroundSize: \"contain\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          height: \"320px\",\n          width: \"180px\",\n        }}\n        src={props.images[props.index]}\n      >\n        <div\n          className=\"d-flex bd-blur shadow text-dark bold text-center justify-content-center align-items-center\"\n          style={{ height: \"320px\", width: \"180px\", fontWeight: \"bold\" }}\n        >\n          {props.que}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ReferenceImage;\n","const ResultControls = (props) => {\n  /**\n   * states\n   *\n   * Base State\n   *   3 steps\n   *     progress 1. Prepare Database (gray)\n   *     progress 2. Add Reference Images (gray)\n   *     progress 3. Evaluate Results (gray)\n   *\n   *   only 1 image in database\n   *     progress 1: Prepare Database (orange)\n   *     tip: add at least 2 images to databse\n   *\n   *   2 or more images in database\n   *     progress 1: Database Ready (green)\n   *\n   *   reference faces added but not selected\n   *     progress 2: Select Reference Face (orange)\n   *     tip: Select a Reference Face\n   *\n   *   reference face selected, waiting for results\n   *     progress 3: matching faces (orange)\n   *\n   *   no match found\n   *     progress 3: No mach found (red)\n   *     tip: try with another reference faces or update database\n   *\n   *   match found\n   *     progress 3: Match found (green)\n   *\n   */\n  if (props.numFaces == 0 || props.numReferences == 0) {\n    return (\n      <div className=\"btn btn-danger disabled\">\n        Complete Steps 1 & 2 to Match Results\n      </div>\n    );\n  }\n  if (props.progressStatus.result == false) {\n    return (\n      <div className=\"row mx-0 justify-content-center\">\n        <button\n          className=\"btn btn-secondary\"\n          onClick={() => props.startQuery()}\n        >\n          Check For Matches\n        </button>\n      </div>\n    );\n  }\n  if (props.progressStatus.result) {\n    return (\n      <div className=\"row mx-0 justify-content-center\">\n        <div className=\"row mx-0 justify-content-center\">\n          {props.foundFace ? (\n            <button className=\"btn btn-success disabled\">Match Found</button>\n          ) : (\n            <button className=\"btn btn-danger disabled\">Match not Found</button>\n          )}\n        </div>\n        <div className=\"row mx-0 my-3 justify-content-center\">\n          <button className=\"btn btn-success \" onClick={() => props.reset()}>\n            Try Another Query\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (\n    props.progressStatus.createDatabase.status == 0 ||\n    props.progressStatus.uploadReferenceImage.status == 0\n  ) {\n    //cannot evaluate results\n    return (\n      <div className=\"btn btn-danger disabled\">\n        Complete Steps 1 & 2 to Match Results\n      </div>\n    );\n  } else if (props.progressStatus.results.status == 0) {\n    //can evaluate results\n    return (\n      <button onClick={() => props.startQuery()}>Check For Matches</button>\n    );\n  } else if (props.foundFace) {\n    return (\n      <button className=\"btn btn-success\" onClick={() => props.startQuery()}>\n        Found a Match\n      </button>\n    );\n  } else if (props.inProgress) {\n    return <button className=\"btn btn-success\"> Loading</button>;\n  } else return <button className=\"btn btn-danger\">No Face Found</button>;\n};\nexport default ResultControls;\n","import { useEffect, useState } from \"react\";\nimport stockPhoto from \"../images/stockperson.png\";\nfunction getImageDimensions(file) {\n  return new Promise(function (resolved, rejected) {\n    var i = new Image();\n    i.onload = function () {\n      resolved({ w: i.width, h: i.height });\n    };\n    i.src = file;\n  });\n}\nconst FoundFace = (props) => {\n  const [img, setImg] = useState(false);\n  const [index, setIndex] = useState(null);\n  const [faceCenter, setCenter] = useState(null);\n  useEffect(() => {\n    if (props.image != false && index == null) {\n      setImg(props.image.image);\n      let imagecomp = document.getElementById(\"faceImage\");\n      imagecomp.crossOrigin = \"Anonymous\";\n      imagecomp.src = props.image.image;\n      imagecomp.onload = function () {\n        let width = imagecomp.naturalWidth;\n        let height = imagecomp.naturalHeight;\n        let centerOfImage = [\n          (props.image.coordinates[0] + props.image.coordinates[2]) / 2,\n          (props.image.coordinates[1] + props.image.coordinates[3]) / 2,\n        ];\n        var imagesInRow = Math.floor(props.localDimensions[1] / 160);\n        var indx =\n          Math.floor((imagesInRow * centerOfImage[1]) / height) * imagesInRow +\n          Math.floor((imagesInRow * centerOfImage[0]) / width);\n        console.log(indx);\n        setIndex(indx);\n      };\n    } else if (props.image === false) {\n      setImg(false);\n      setIndex(null);\n    }\n  }, [props.image]);\n\n  return (\n    <>\n      <div\n        className=\"shadow\"\n        src={\"url(\" + (index != null ? props.faces[index] : \"\") + \")\"}\n        style={{\n          position: \"absolute\",\n          width: \"180px\",\n          height: \"320px\",\n          display: \"block\",\n          backgroundImage:\n            \"url(\" + (index != null ? props.faces[index] : \"\") + \")\",\n          backgroundSize: \"cover\",\n          borderRadius: \"15px\",\n        }}\n      />\n      <img\n        id=\"faceImage\"\n        style={{ display: \"none\" }}\n        // onLoad={() => {\n        //   adjustDimensions();\n        // }}\n      ></img>\n      {img ? (\n        <div className=\"col-12 row mx-0 justify-content-center align-items-center\">\n          <div className=\"col-12 row mx-0 justify-content-center\">\n            {/* <canvas\n              id=\"faceCanvas\"\n              className=\"mx-0 px-0 my-0\"\n              style={{\n                width: props.image.coordinates[2] + \"px\",\n                height: props.image.coordinates[3] + \"px\",\n              }}\n              // style={{ display: \"block\" }}\n            ></canvas> */}\n          </div>\n          <div className=\"col-12 text-center\">Matched Imaged</div>\n\n          {/* <div className=\"text-center\">Reference Image</div> */}\n        </div>\n      ) : (\n        <div>\n          <div\n            className=\"d-inline-flex\"\n            style={{\n              borderRadius: \"15px\",\n              backgroundImage: \"url(\" + stockPhoto + \")\",\n              backgroundSize: \"contain\",\n              backgroundPosition: \"center\",\n              backgroundRepeat: \"no-repeat\",\n              height: \"320px\",\n              width: \"180px\",\n            }}\n            // src={props.images[props.index]}\n          >\n            <div\n              className=\"d-flex bd-blur shadow text-dark bold text-center justify-content-center align-items-center\"\n              style={{ height: \"320px\", width: \"180px\", fontWeight: \"bold\" }}\n            >\n              {props.que}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\nexport default FoundFace;\n","import { Info } from \"@material-ui/icons\";\nconst Tips = (props) => {\n  for (let tip in props.tips) {\n    if (props.tips[tip].condition)\n      return (\n        <div className=\"col-12 d-flex text-muted justify-content-center\">\n          <Info /> &nbsp;{props.tips[tip].text}\n        </div>\n      );\n  }\n  return null;\n};\n\nexport default Tips;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as faceapi from \"face-api.js\";\nimport WebcamComponent from \"./components/webcamComponent\";\nimport ReferenceGrid from \"./components/ReferenceGrid\";\nimport UploadButtonGroup from \"./components/UploadButtonGroup\";\nimport FaceGrid from \"./components/FaceGrid\";\nimport ReferenceImage from \"./components/ReferenceImage\";\nimport ResultControls from \"./components/ResultControls\";\nimport FoundFace from \"./components/FoundFace\";\n\nimport Tips from \"./components/tips\";\nimport { FormatUnderlinedSharp } from \"@material-ui/icons\";\nfunction App() {\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [faces, setFaces] = useState([]);\n  const [referenceFaces, setReferenceFaces] = useState([]);\n  const [referenceFace, setReferenceFace] = useState(-1);\n  const [processing, setProcessing] = useState(false);\n  const [queries, setQueries] = useState([]);\n  const [imageDimensions, setImageDimensions] = useState([]);\n  const [foundFace, setFoundFace] = useState(false);\n  const [progressStatus, setProgressStatus] = useState({\n    // active_reference: -1,\n    // editable: true,\n    fetchingResults: false,\n    inputResource: \"\",\n    inputTarget: \"\",\n    foundFace: false,\n    result: false,\n\n    createDatabase: { label: \"Create Database\", status: 0 },\n    uploadReferenceImage: { label: \"Upload Reference\", status: 0 },\n    results: { label: \"Results\", status: 0 },\n  });\n\n  /**\n   * update referenceFace\n   */\n  useEffect(() => {\n    if (referenceFaces.length > 0 && referenceFace == -1) {\n      setReferenceFace(0);\n    }\n  }, [referenceFaces]);\n  /**\n   * old code\n   */\n  // useEffect(() => {\n  //   if (faces.length > 0) {\n  //     let temp = { ...progressStatus };\n  //     temp.createDatabase.status = 1;\n  //     setProgressStatus(temp);\n  //   } else {\n  //     let temp = { ...progressStatus };\n  //     temp.createDatabase.status = 0;\n  //     setProgressStatus(temp);\n  //   }\n  // }, [faces]);\n\n  /**\n   * Load Model\n   */\n  useEffect(() => {\n    async function loadModel() {\n      const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n      await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n      setModelLoaded(true);\n    }\n    loadModel();\n  }, []);\n\n  /**\n   * Polling Function\n   */\n  useEffect(() => {\n    async function poll() {\n      let temp = [...queries];\n      for (let i = 0; i < temp.length; i++) {\n        if (!temp[i].result) {\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n          let res = await fetch(\n            \"https://api.skylarklabs.ai/face-recognition/\" +\n              temp[i].query +\n              \"?key=662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\",\n            {\n              method: \"GET\",\n            }\n          )\n            .then((response) => response.json())\n            .then((data) => {\n              console.log(data);\n              return data;\n            });\n          if (res.status == \"success\") {\n            temp[i].result = res;\n            temp[i].result.json = JSON.parse(temp[i].result.response_json);\n            setQueries(temp);\n          } else if (res.status == \"pending\") {\n            setQueries([...temp]);\n          } else {\n            temp[i].result = \"failed\";\n            setQueries(temp);\n          }\n        }\n      }\n    }\n    if (\n      queries.length > 0 &&\n      (queries[queries.length - 1].result.status == \"success\" ||\n        queries[queries.length - 1].result.status == \"failed\")\n    ) {\n      setProgressStatus({\n        ...progressStatus,\n        result: true,\n      });\n    } else poll();\n  }, [queries]);\n\n  /**\n   * Handles response from the queries\n   * checks if a matched face is found\n   */\n  useEffect(() => {\n    if (progressStatus.result == true && foundFace === false) {\n      let active = null;\n      for (let i = 0; i < queries.length; i++) {\n        console.log(\"here\");\n        console.log(queries[i].result.json.recognitions);\n        for (let j = 0; j < queries[i].result.json.recognitions.length; j++) {\n          console.log(queries[i].result.json.recognitions[j]);\n          if (queries[i].result.json.recognitions[j][0] != -1) {\n            if (\n              active == null ||\n              active.prob < queries[i].result.json.recognitions[j][1]\n            ) {\n              active = {};\n              active.prob = queries[i].result.json.recognitions[j][1];\n              active.coordinates =\n                queries[i].result.json.query_detections[j].coordinates;\n              active.image = queries[i].img;\n            }\n          }\n        }\n      }\n      console.log(active);\n      if (active != null) {\n        setFoundFace(active);\n        setProgressStatus({ ...progressStatus, result: true });\n      }\n    }\n  }, [progressStatus]);\n  console.log(foundFace);\n  async function postRequest(image) {\n    let c = document.getElementById(\"hiddenCanvas\");\n    let ctx = c.getContext(\"2d\");\n    let hiddenImage = document.getElementById(\"hiddenImage\");\n    let hiddenImage2 = document.getElementById(\"hiddenImage2\");\n    var data = new FormData();\n    hiddenImage.src = image;\n    let imageBlob = await new Promise((resolve) =>\n      c.toBlob(resolve, \"image/png\")\n    );\n    data.set(\"query_image\", imageBlob, \"file2.png\");\n    c.width = 180;\n    c.height = 320;\n    hiddenImage.src = referenceFaces[referenceFace];\n    setTimeout(() => {}, 100);\n    ctx.drawImage(hiddenImage, 0, 0, 180, 320);\n    let imageBlob1 = await new Promise((resolve) =>\n      c.toBlob(resolve, \"image/png\")\n    );\n\n    data.set(\"target_image\", imageBlob1, \"file1.png\");\n    data.set(\n      \"key\",\n      \"662b2a0adeb3bbc7388bb274fc735c98648f0c70e6ebde9aebb9b56784f05d33\"\n    );\n    hiddenImage.src = URL.createObjectURL(imageBlob);\n    return fetch(\"https://api.skylarklabs.ai/face-recognition/\", {\n      method: \"POST\",\n      body: data,\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        // temp[i].query = data.id;\n        // setQueries(temp);\n        return data.id;\n      });\n  }\n  console.log(queries);\n\n  /**\n   * Functions\n   *\n   * handleFileInput\n   * handles input from file\n   * sends cropped faces to database or reference array\n   *\n   * handleWebcamInput\n   * handles input from webcam\n   * sends cropped faces to databse or reference array\n   *\n   * addFacesToDatabase\n   * adds faces to database\n   *\n   * addFacesToReference\n   * adds faces to reference\n   *\n   * removeFaceFromDatabse\n   * input: index (number)\n   * removes face from database\n   *\n   * removeFaceFromReference\n   * input: index (number)\n   * removes face from reference\n   */\n\n  async function processFaces() {\n    let aspect_ratio = 16 / 9;\n    var options = new faceapi.SsdMobilenetv1Options({\n      minConfidence: 0.4,\n    });\n    //console.log(faces);\n    let predictions = await faceapi.detectAllFaces(\"hiddenImage\", options);\n    let temp = [];\n    for (var i = 0; i < predictions.length; i++) {\n      let width = predictions[i].box._width;\n      let height = predictions[i].box.height;\n      let adjustmentx = 0;\n      let adjustmenty = 0;\n      if (width * aspect_ratio > height) {\n        adjustmenty = width * aspect_ratio - height;\n      } else if (height > width * aspect_ratio) {\n        adjustmentx = height / aspect_ratio - width;\n      }\n      var canv = await faceapi.extractFaces(\"hiddenImage\", [\n        new faceapi.Rect(\n          predictions[i].box._x - adjustmentx / 2,\n          predictions[i].box._y - adjustmenty / 2,\n          predictions[i].box._width + adjustmentx,\n          predictions[i].box._height + adjustmenty\n        ),\n      ]);\n      predictions[i].url = canv[0].toDataURL();\n      temp.push(canv[0].toDataURL());\n    }\n    return temp;\n  }\n  async function handleFileInput(addedImage, target) {\n    setProcessing(true);\n    document.getElementById(\"hiddenImage\").src = addedImage;\n    let newFaces = await processFaces();\n    if (target == \"database\") {\n      setFaces([...faces, ...newFaces]);\n    } else if (target == \"reference\") {\n      setReferenceFaces([...referenceFaces, ...newFaces]);\n    }\n    setProcessing(false);\n  }\n  async function handleWebcamInput(addedImage) {\n    setProcessing(true);\n    document.getElementById(\"hiddenImage\").src = addedImage;\n    let newFaces = await processFaces();\n    if (progressStatus.inputTarget == \"database\") {\n      setFaces([...faces, ...newFaces]);\n      setProgressStatus({\n        ...progressStatus,\n        inputResource: \"\",\n        inputTarget: \"\",\n      });\n    } else if (progressStatus.inputTarget == \"reference\") {\n      setReferenceFaces([...referenceFaces, ...newFaces]);\n      setProgressStatus({\n        ...progressStatus,\n        inputResource: \"\",\n        inputTarget: \"\",\n      });\n    }\n    setProcessing(false);\n  }\n  const removeFace = (index) => {\n    var temp = [];\n    for (var i = 0; i < faces.length; i++) {\n      if (index != i) {\n        temp.push(faces[i]);\n      } else {\n        URL.revokeObjectURL(faces[i]);\n      }\n    }\n    setFaces(temp);\n  };\n  const removeReferenceFace = (index) => {\n    var temp = [];\n    for (var i = 0; i < referenceFaces.length; i++) {\n      if (index != i) {\n        temp.push(referenceFaces[i]);\n      } else {\n        URL.revokeObjectURL(referenceFaces[i]);\n      }\n    }\n    if (progressStatus.active_reference === index) {\n      setProgressStatus({ ...progressStatus, active_reference: -1 });\n    } else if (progressStatus.active_reference > index) {\n      setProgressStatus({\n        ...progressStatus,\n        active_reference: progressStatus.active_reference - 1,\n      });\n    }\n    setReferenceFaces(temp);\n  };\n\n  const closeWebcam = () => {\n    console.log(\"yes\");\n    if (progressStatus.inputResource === \"camera\")\n      setProgressStatus({\n        ...progressStatus,\n        inputResource: \"\",\n        inputTarget: \"\",\n      });\n  };\n  const startWebCam = (target) => {\n    setProgressStatus({\n      ...progressStatus,\n      inputResource: \"camera\",\n      inputTarget: target,\n    });\n  };\n\n  /**\n   * prepares a grid for the target image (query)\n   *\n   */\n  async function prepareGridImage() {\n    //prepares grid for query and sends request\n    var c = document.getElementById(\"hiddenCanvas\");\n    var hiddenImage = document.getElementById(\"hiddenImage2\");\n    var ctx = c.getContext(\"2d\");\n    //compute size of canvas\n    var length_in_images = Math.ceil(Math.sqrt(faces.length));\n    var num_grids = 1;\n    if (length_in_images > 12) {\n      num_grids = Math.ceil(faces.length / 144);\n      length_in_images = 12;\n    }\n    c.width = length_in_images * 90;\n    c.height = length_in_images * 160;\n    setImageDimensions([length_in_images * 90, length_in_images * 160]);\n    let q = [];\n    for (let i = 0; i < num_grids; i++) {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, length_in_images * 90, length_in_images * 160);\n      for (\n        let j = 0;\n        j < length_in_images * length_in_images &&\n        i * length_in_images + j < faces.length;\n        j++\n      ) {\n        let index = i * length_in_images * length_in_images + j;\n        hiddenImage.src = faces[index];\n        ctx.drawImage(\n          hiddenImage,\n          (index % length_in_images) * 90,\n          Math.floor(j / length_in_images) * 160,\n          90,\n          160\n        );\n      }\n      var im = c.toDataURL();\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      let reqId = await postRequest(im);\n      q.push({\n        img: im,\n        query: reqId,\n        result: false,\n        index: i,\n      });\n    }\n    setQueries(q);\n  }\n  function reset() {\n    setProgressStatus({ ...progressStatus, result: false });\n    setFoundFace(false);\n    setQueries([]);\n  }\n  return (\n    <div className=\"App \">\n      <div\n        id=\"webcamBackdrop\"\n        className={\n          progressStatus.inputResource === \"camera\" ? \"d-block\" : \"d-none\"\n        }\n        style={{\n          width: window.innerWidth,\n          height: window.innerHeight,\n        }}\n      >\n        {progressStatus.inputResource === \"camera\" ? (\n          <WebcamComponent\n            addImage={handleWebcamInput}\n            closeWebcam={closeWebcam}\n            processing={processing}\n          />\n        ) : null}\n      </div>\n      <div id=\"navbar\" className=\"shadow bg-dark text-light mb-2\">\n        Face Recognition Demo\n      </div>\n      <div className=\"row mx-0 col-12\">\n        <div id=\"databaseGridArea\" className=\"row mx-0 bg-light px-0\">\n          <div\n            className={\n              \"col-12 text-light \" +\n              (faces.length > 0 ? \"bg-success \" : \"bg-secondary\")\n            }\n          >\n            Step 1: Create your database\n          </div>\n          <div className=\"col-12 px-0\">\n            <FaceGrid\n              result={progressStatus.result}\n              images={faces}\n              removeImage={removeFace}\n            />\n          </div>\n          {/* <Tips\n            tips={[\n              {\n                condition: faces.length == 0,\n                text: \"Faces can be added from a file or the database\",\n              },\n              {\n                condition: faces.length == 1,\n                text: \"Database can have mutiple faces\",\n              },\n            ]}\n          /> */}\n          <div className=\"col-12 d-flex justify-content-center\">\n            <UploadButtonGroup\n              label=\"Import Faces\"\n              webcamFunction={() => startWebCam(\"database\")}\n              modelLoaded={modelLoaded}\n              handleFileInput={(arg) => handleFileInput(arg, \"database\")}\n              target=\"database\"\n              processing={processing}\n            />\n          </div>\n        </div>\n        <div id=\"referenceArea\" className=\"row mx-0 bg-light px-0\">\n          <div\n            className={\n              \"col-12 text-light \" +\n              (referenceFaces.length > 0 ? \"bg-success\" : \"bg-secondary\")\n            }\n          >\n            Step 2: Add a reference face\n          </div>\n          <ReferenceGrid\n            result={progressStatus.result}\n            images={referenceFaces}\n            removeImage={removeReferenceFace}\n            active={referenceFace}\n            setActive={setReferenceFace}\n          />\n          {/* <Tips\n            tips={[\n              {\n                condition: referenceFaces.length == 0,\n                text: \"Faces can be added from a file or the database\",\n              },\n            ]}\n          /> */}\n          <div className=\"col-12 d-flex justify-content-center pb-2\">\n            <UploadButtonGroup\n              label=\"Import Faces\"\n              webcamFunction={() => startWebCam(\"reference\")}\n              modelLoaded={modelLoaded}\n              handleFileInput={(arg) => handleFileInput(arg, \"reference\")}\n              target=\"reference\"\n              processing={processing}\n            />\n          </div>\n        </div>\n        <div id=\"referenceEntryArea\"></div>\n        <div id=\"resultArea\" className=\"row mx-0 bg-light px-0\">\n          <div\n            className={\n              \"col-12 text-light \" + (foundFace ? \"bg-success\" : \"bg-secondary\")\n            }\n          >\n            Results\n          </div>\n          <Tips\n            tips={[\n              {\n                condition: !progressStatus.result,\n                text: \"Results will be displayed here\",\n              },\n              {\n                condition: foundFace,\n                text: \"Found a Matching face, to run another query press the button below\",\n              },\n              {\n                condition: !foundFace,\n                text: \"No face matched, try updating database or with better images\",\n              },\n            ]}\n          />\n          <div className=\"row mx-0 col-12 bg-light\">\n            <div className=\"col-4 d-flex mx-0 justify-content-center\">\n              <ReferenceImage\n                images={referenceFaces}\n                index={referenceFace}\n                label=\"Reference Image\"\n                que=\"Reference Image Will be displayed here\"\n              />\n            </div>\n            <div className=\"col-4 d-flex justify-content-center align-items-center\">\n              <ResultControls\n                progressStatus={progressStatus}\n                numFaces={faces.length}\n                numReferences={referenceFaces.length}\n                startQuery={() => {\n                  prepareGridImage();\n                }}\n                foundFace={foundFace}\n                inProgress={processing}\n                reset={reset}\n              />\n              {/* <button onClick={() => prepareGridImage()}>prepare</button> */}\n            </div>\n            <div className=\"col-4 d-flex mx-0 justify-content-center\">\n              <FoundFace\n                image={foundFace}\n                label=\"Mached Image\"\n                que=\"Images Matched Will be displayed here\"\n                localDimensions={imageDimensions}\n                faces={faces}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <img id=\"hiddenImage\" style={{ display: \"none\" }} src=\"\" />\n      <img id=\"hiddenImage2\" style={{ display: \"none\" }} src=\"\" />\n      <canvas id=\"hiddenCanvas\" style={{ display: \"none\" }} />\n      <canvas id=\"hiddenCanvas2\" style={{ display: \"none\" }} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}